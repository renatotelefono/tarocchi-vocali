---
---
<html lang="it">
  <head>
    <meta charset="UTF-8" />
    <title>Tarocchi Vocali</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <style>
      body { font-family: Arial, sans-serif; text-align: center; padding: 40px; background: #fafafa; }
      h1 { font-size: 28px; }
      p { font-size: 18px; color: #444; }
      button { padding: 15px 30px; font-size: 18px; margin: 20px; cursor: pointer; }
      #output { margin-top: 20px; font-size: 22px; color: #333; }

      .top-bar {
        display: flex;
        justify-content: space-between;
        max-width: 600px;
        margin: 0 auto;
        font-weight: bold;
      }

      #usedList {
        font-size: 16px;
        color: #333;
        text-align: left;
        white-space: pre-line;
        margin-top: 10px;
      }

      .container {
        display: flex;
        justify-content: center;
        align-items: flex-start;
        gap: 40px;
        margin-top: 30px;
      }

      .card {
        width: 180px;
        height: 280px;
        border: 2px solid #444;
        border-radius: 8px;
        background-size: cover;
        background-position: center;
        opacity: 0;
        transition: opacity 0.6s ease-in;
      }
      .card.visible { opacity: 1; }

      #cardName { 
        font-size: 24px; 
        font-weight: bold; 
        margin-top: 15px; 
      }

      #cardMarkdown {
        max-width: 500px;
        text-align: left;
        font-size: 16px;
        line-height: 1.5;
        color: #333;
        background: #fff;
        padding: 15px;
        border-radius: 8px;
        border: 1px solid #ddd;
      }

      .error { color: red; font-weight: bold; }
    </style>
    <!-- Markdown parser -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  </head>
  <body>
    <h1>🔮 Lettura Tarocchi Vocale</h1>
    <p>Premi il microfono e pronuncia il nome di una carta. Verrà mostrata con la sua descrizione Markdown a destra.</p>

    <div class="top-bar">
      <div>Carte uscite: <span id="usedCount">0</span></div>
      <div>Carte rimanenti: <span id="remainingCount">0</span></div>
    </div>
    <div id="usedList"></div>

    <button id="startBtn">🎤 Ascolta</button>
    <button id="resetBtn">🔄 Resetta Mazzo</button>

    <p id="output">In attesa...</p>
    <div class="container" id="cardContainer"></div>

    <script type="module">
      let cards = [];
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      const synth = window.speechSynthesis;

      const output = document.getElementById("output");
      const cardContainer = document.getElementById("cardContainer");
      const usedCount = document.getElementById("usedCount");
      const remainingCount = document.getElementById("remainingCount");
      const usedList = document.getElementById("usedList");

      let availableCards = [];
      let usedCards = [];

      async function loadCards() {
        const response = await fetch('/cards.json');
        cards = await response.json();
        availableCards = [...cards];
        updateCounters();
      }

      function updateCounters() {
        usedCount.textContent = usedCards.length.toString();
        remainingCount.textContent = availableCards.length.toString();
        usedList.textContent = usedCards.join("\n");
      }

      function resetDeck() {
        availableCards = [...cards];
        usedCards = [];
        cardContainer.innerHTML = "";
        output.textContent = "In attesa...";
        updateCounters();
      }

      document.getElementById("resetBtn").addEventListener("click", resetDeck);

      if (!SpeechRecognition) {
        alert("❌ Il tuo browser non supporta la Web Speech API");
      } else {
        const recognition = new SpeechRecognition();
        recognition.lang = "it-IT";
        recognition.interimResults = false;

        document.getElementById("startBtn").addEventListener("click", () => {
          console.log("🎤 Avvio microfono...");
          recognition.start();
          output.textContent = "🎧 Sto ascoltando...";
        });

        recognition.addEventListener("result", async (event) => {
          const transcript = event.results[0][0].transcript.toLowerCase();
          console.log("✅ Riconosciuto:", transcript);
          output.textContent = "Hai detto: " + transcript;

          const index = availableCards.findIndex(c => transcript.includes(c.name));
          if (index === -1) {
            cardContainer.innerHTML = `<p class="error">Carta non trovata o già uscita</p>`;
            return;
          }

          const card = availableCards.splice(index, 1)[0];
          usedCards.push(card.name);
          updateCounters();

          // Mostra carta e placeholder descrizione
          cardContainer.innerHTML = `
            <div>
              <div class="card visible" style="background-image:url('/cards_arcani_maggiori/${card.file}')"></div>
              <div id="cardName">${card.name}</div>
            </div>
            <div id="cardMarkdown">Caricamento descrizione...</div>
          `;

          // Genera il nome file markdown: estrae "00_Fool" da "RWS1909_-_00_Fool.jpeg"
          const markdownFile = card.file.replace("RWS1909_-_", "").replace(".jpeg", ".md");

          // Carica markdown
          const res = await fetch('/descrizioni_arcani_maggiori/' + markdownFile);
          if (!res.ok) {
            document.getElementById("cardMarkdown").innerHTML = "<p class='error'>Descrizione non trovata</p>";
            return;
          }
          let mdText = await res.text();

          // 🔹 Rimuove eventuale frontmatter
          mdText = mdText.replace(/^---[\s\S]*?---/, "").trim();

          // Mostra formattato
          document.getElementById("cardMarkdown").innerHTML = marked.parse(mdText);

          // Sintesi vocale (rimuovo simboli Markdown)
          const utter = new SpeechSynthesisUtterance(mdText.replace(/[#*_>\-]/g,""));
          utter.lang = "it-IT";
          synth.speak(utter);
        });
      }

      loadCards();
    </script>
  </body>
</html>
